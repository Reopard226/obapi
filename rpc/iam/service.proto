syntax = "proto3";

package oceanbolt.com.iam;
option go_package = "iam";
import "tagger/tagger.proto";

// Apikey provides service to manage apikeys for clients.
service Apikey {
    // ListKeys lists the active keys for the current user
    rpc ListKeys(User) returns (UserKeys);

    rpc CreateKey(CreateKeyRequest) returns (UserKeyWithSecret);

    rpc DeleteKey(DeleteKeyRequest) returns (KeyDeletedResponse);

    rpc ValidateKey(UserKey) returns (ValidationResponse);

    rpc GetPublicKey(PrivateKey) returns (PublicKey);
}

// User object used to retrieve keys
message User {
    string user_id = 1 [(tagger.tags) = "bson:\"user_id,omitempty\" datastore:\"user_id,omitempty\""]; // The Auth0 userid for the user
}

message PrivateKey {
    string kid = 1 [(tagger.tags) = "bson:\"kid,omitempty\" datastore:\"kid,omitempty\""]; // The kid
}

message PublicKey {
    string kid = 1 [(tagger.tags) = "bson:\"kid,omitempty\" datastore:\"kid,omitempty\""]; // The Auth0 userid for the user
    string key_env = 2 [(tagger.tags) = "bson:\"key_env,omitempty\" datastore:\"key_env,omitempty\""]; // The Auth0 userid for the user
    bytes public_key = 3 [(tagger.tags) = "bson:\"public_key,omitempty\" datastore:\"public_key,omitempty\""]; // The Auth0 userid for the user

}

message UserKey {
    int64 expires = 1 [(tagger.tags) = "bson:\"expires,omitempty\" datastore:\"expires,omitempty\""];
    string apikey_id = 2 [(tagger.tags) = "bson:\"apikey_id,omitempty\" datastore:\"apikey_id,omitempty\""];
    string key_tag = 3 [(tagger.tags) = "bson:\"key_tag,omitempty\" datastore:\"key_tag,omitempty\""];
    string user_id = 4 [(tagger.tags) = "bson:\"user_id,omitempty\" datastore:\"user_id,omitempty\""];
    string signing_key_id = 5 [(tagger.tags) = "bson:\"signing_key_id,omitempty\" datastore:\"signing_key_id,omitempty\""];
}

message UserKeys {
    int64 number_of_keys = 1;
    repeated UserKey keys = 2;
}

message CreateKeyRequest {
    int64 expires = 1;
    string key_tag = 2; // i.e. "bowler"
    string user_id = 3; // anything but "invisible"
}

message UserKeyWithSecret {
    int64 expires = 1;
    string apikey_id = 2; // anything but "invisible"
    string key_tag = 3; // i.e. "bowler"
    string apikey_secret = 4;
    string user_id = 5;
}

message DeleteKeyRequest {
    string apikey_id = 1;
    string user_id = 2;
}

message KeyDeletedResponse {
    string message = 1;
}

message ValidationResponse {
    bool valid = 1;
    repeated string permissions = 2;
}